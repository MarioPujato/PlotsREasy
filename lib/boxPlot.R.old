write( paste("[BOX_boxPlot |",curDate,"|",sessionId,"] Plotting boxplot using file:",dataFile), file=stderr())

data_table = read.table( dataFile, header = T, sep = "\t", check.names = F )
x_label1   = colnames( data_table )
# Format data into matrix
m_data     = as.matrix( data_table )

# Get colors for plot from multiple selection
colors  = valuesBOX$colors

nColors = length(x_label1)
colors  = colorRampPalette(colors)( n=nColors )

# Control plot margins and spacing between text lines
par(
	mai = c(
		input$bottomMarBOX,
		input$leftMarBOX,
		input$upperMarBOX,
		input$rightMarBOX
	),
	lheight = 0.8, # Inter-line spacing
	ljoin   = 1,   # Square lines
	lend    = 2,   # Square ends in lines
	xaxs    = "i", # Removes the 4% space added to each side of x axis
	yaxs    = "i", # Removes the 4% space added to each side of y axis
	xpd     = NA
)

# Titles all around the plot
title = gsub( ":n:", "\n", input$titleBOX )

par( xpd = F )

# Set plot limits (defaults to min and max values of X and Y axis)
ymin = min( m_data )
ymax = max( m_data )

# Add 5% of the range to each side in both dimensions
yrange = ymax - ymin
ymin   = ymin - yrange * 0.05
ymax   = ymax + yrange * 0.05

if( !is.na(input$yMinBOX) ){
	ymin = input$yMinBOX
}
if( !is.na(input$yMaxBOX) ){
	ymax = input$yMaxBOX
}

# Graph multiple line and/or symbol scatter plot
whiskers = as.integer(input$whiskersBOX)

boxplot(
	m_data,
	main      = input$titleBOX,
	cex.main  = input$titleSizeBOX,
	col       = colors,
	axes      = F,
	pch       = input$symbolTypeBOX,     # Symbol type (1:open circle, 0:open square, 19:filled circle, 15:filled square)
	lty       = input$lineTypeBOX,       # Line type
	lwd       = input$lineWidthBOX / 2,  # Line width
	cex       = input$symbolSizeBOX,     # Symbol size
	notch     = input$notchBOX,
	outline   = input$outliersBOX,
	whisklty  = whiskers,
	staplelty = whiskers,
	range     = input$whiskerPercBOX,
	ylim      = c( ymin, ymax )
)

par( xpd = NA )

# Y axis
axis(
	2,
	lwd      =  input$lineWidthBOX,
#	padj     = -input$yScalePosBOX,
	las      = 2,
	cex.axis =  input$scaleSizeBOX
)

# X-axis label 1
xlab_pos_usr = grconvertY( input$xXlabel1BOX, from = "ndc", to = "user" )
# horizontal adj
y_adj = 0.5
x_adj = 0

# Vertical adj
if( input$xLabDirBOX == 90 ){
	y_adj = 1
	x_adj = 0.5

	if( xlab_pos_usr > ymin ){
		y_adj = 0
	}
}
xlab_adj = c(y_adj,x_adj)

x_scale = seq( 1, ncol(m_data), by = 1 )
text(
	x_scale,
	xlab_pos_usr,
	adj   = xlab_adj,
	label = x_label1,
	srt   = input$xLabDirBOX,
	cex   = input$xLabelSizeBOX
)

# X-axis label 2
x_label2 = gsub( ":n:", "\n", input$xLabelBOX )
text(
	grconvertX( 0.50, from = "npc", to = "user" ),
	grconvertY( input$xXlabel2BOX, from = "ndc", to = "user" ),
	adj   = c(0.5,0),
	label = x_label2,
	srt   = 0,
	cex   = input$xLabelSizeBOX
)

# Y-axis label
y_label = gsub( ":n:", "\n", input$yLabelBOX )
text(
	grconvertX( input$yYlabelBOX, from = "ndc", to = "user" ),
	grconvertY( 0.50, from = "npc", to = "user" ),
	adj   = c(0.5,1),
	label = y_label,
	srt   = 90,
	cex   = input$yLabelSizeBOX
)

# Add mean values as squares
par( new = T )
plot_meansize = 2.0

# Calculate means
mean_data = c()

for( i in 1:ncol( m_data ) ){
	mean_data = c( mean_data, mean( m_data[,i] ))
}

plot(
	x_scale,
	mean_data,
	axes     = F,
	type     = "p",        # Plot type
	pch      = 15,         # Symbol type (1:open circle, 0:open square, 19:filled circle, 15:filled square)
	cex      = input$meanSizeBOX,
	xlab     = NA,
	ylab     = NA,
	ylim     = c( ymin, ymax ),
	xlim     = c( 0.5, max(x_scale)+0.5 )
)

# Add box around plot
# "o" (the default), "l", "7", "c", "u", or "]"
# "n" suppresses the box
boxtypes = c('n','o','l','7','c','u',']')
boxtype  = boxtypes[input$boxTypeBOX+1]

if( input$boxSwitchBOX ){
	box(
		which = 'plot',
		bty   = boxtype,
		lwd   = input$line1WidthBOX
	)
}

# Add legend to have extra control
if( input$legendSwitchBOX ){
	legend(
		grconvertX( input$xLegendBOX, from = "ndc", to = "user" ),
		grconvertY( input$yLegendBOX, from = "ndc", to = "user" ),
		x_label1,
		horiz     = input$legendTypeBOX, # T: horizontal, F: vertical
		fill      = colors,
		bty       = 'n',              # No box
		cex       = input$legendSizeBOX, # Text size multiplier
		x.intersp = 0.5,              # Horizontal spacing
		y.intersp = 0.9               # Vertical spacing
	)
}

write( paste("[BOX_boxPlot |",curDate,"|",sessionId,"] DONE"), file=stderr())
